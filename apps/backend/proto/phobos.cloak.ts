// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.24.2
// source: phobos.cloak.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "";

export interface SetClusterMixingMatrix {
}

export interface SetClusterMixingMatrix_Request {
  matrix: number[];
}

export interface SetClusterMixingMatrix_Response {
}

export interface GetClusterMixingMatrix {
}

export interface GetClusterMixingMatrix_Request {
}

export interface GetClusterMixingMatrix_Response {
  matrix: number[];
}

export interface GetTargetClusterMixingMatrix {
}

export interface GetTargetClusterMixingMatrix_Request {
}

export interface GetTargetClusterMixingMatrix_Response {
  matrix: number[];
}

export interface SetTargetClusterMixingMatrix {
}

export interface SetTargetClusterMixingMatrix_Request {
  matrix: number[];
}

export interface SetTargetClusterMixingMatrix_Response {
}

export interface GetPhasePower {
}

export interface GetPhasePower_Request {
}

export interface GetPhasePower_Response {
  power: number[];
}

export interface SetPhasePower {
}

export interface SetPhasePower_Request {
  power: number[];
}

export interface SetPhasePower_Response {
}

export interface GetTargetPhasePower {
}

export interface GetTargetPhasePower_Request {
}

export interface GetTargetPhasePower_Response {
  power: number[];
}

export interface SetTargetPhasePower {
}

export interface SetTargetPhasePower_Request {
  power: number[];
}

export interface SetTargetPhasePower_Response {
}

function createBaseSetClusterMixingMatrix(): SetClusterMixingMatrix {
  return {};
}

export const SetClusterMixingMatrix = {
  encode(_: SetClusterMixingMatrix, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetClusterMixingMatrix {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetClusterMixingMatrix();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SetClusterMixingMatrix {
    return {};
  },

  toJSON(_: SetClusterMixingMatrix): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SetClusterMixingMatrix>, I>>(base?: I): SetClusterMixingMatrix {
    return SetClusterMixingMatrix.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetClusterMixingMatrix>, I>>(_: I): SetClusterMixingMatrix {
    const message = createBaseSetClusterMixingMatrix();
    return message;
  },
};

function createBaseSetClusterMixingMatrix_Request(): SetClusterMixingMatrix_Request {
  return { matrix: [] };
}

export const SetClusterMixingMatrix_Request = {
  encode(message: SetClusterMixingMatrix_Request, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.matrix) {
      writer.float(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetClusterMixingMatrix_Request {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetClusterMixingMatrix_Request();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 13) {
            message.matrix.push(reader.float());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.matrix.push(reader.float());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetClusterMixingMatrix_Request {
    return {
      matrix: globalThis.Array.isArray(object?.matrix) ? object.matrix.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: SetClusterMixingMatrix_Request): unknown {
    const obj: any = {};
    if (message.matrix?.length) {
      obj.matrix = message.matrix;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetClusterMixingMatrix_Request>, I>>(base?: I): SetClusterMixingMatrix_Request {
    return SetClusterMixingMatrix_Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetClusterMixingMatrix_Request>, I>>(
    object: I,
  ): SetClusterMixingMatrix_Request {
    const message = createBaseSetClusterMixingMatrix_Request();
    message.matrix = object.matrix?.map((e) => e) || [];
    return message;
  },
};

function createBaseSetClusterMixingMatrix_Response(): SetClusterMixingMatrix_Response {
  return {};
}

export const SetClusterMixingMatrix_Response = {
  encode(_: SetClusterMixingMatrix_Response, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetClusterMixingMatrix_Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetClusterMixingMatrix_Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SetClusterMixingMatrix_Response {
    return {};
  },

  toJSON(_: SetClusterMixingMatrix_Response): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SetClusterMixingMatrix_Response>, I>>(base?: I): SetClusterMixingMatrix_Response {
    return SetClusterMixingMatrix_Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetClusterMixingMatrix_Response>, I>>(_: I): SetClusterMixingMatrix_Response {
    const message = createBaseSetClusterMixingMatrix_Response();
    return message;
  },
};

function createBaseGetClusterMixingMatrix(): GetClusterMixingMatrix {
  return {};
}

export const GetClusterMixingMatrix = {
  encode(_: GetClusterMixingMatrix, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetClusterMixingMatrix {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetClusterMixingMatrix();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetClusterMixingMatrix {
    return {};
  },

  toJSON(_: GetClusterMixingMatrix): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetClusterMixingMatrix>, I>>(base?: I): GetClusterMixingMatrix {
    return GetClusterMixingMatrix.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetClusterMixingMatrix>, I>>(_: I): GetClusterMixingMatrix {
    const message = createBaseGetClusterMixingMatrix();
    return message;
  },
};

function createBaseGetClusterMixingMatrix_Request(): GetClusterMixingMatrix_Request {
  return {};
}

export const GetClusterMixingMatrix_Request = {
  encode(_: GetClusterMixingMatrix_Request, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetClusterMixingMatrix_Request {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetClusterMixingMatrix_Request();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetClusterMixingMatrix_Request {
    return {};
  },

  toJSON(_: GetClusterMixingMatrix_Request): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetClusterMixingMatrix_Request>, I>>(base?: I): GetClusterMixingMatrix_Request {
    return GetClusterMixingMatrix_Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetClusterMixingMatrix_Request>, I>>(_: I): GetClusterMixingMatrix_Request {
    const message = createBaseGetClusterMixingMatrix_Request();
    return message;
  },
};

function createBaseGetClusterMixingMatrix_Response(): GetClusterMixingMatrix_Response {
  return { matrix: [] };
}

export const GetClusterMixingMatrix_Response = {
  encode(message: GetClusterMixingMatrix_Response, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.matrix) {
      writer.float(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetClusterMixingMatrix_Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetClusterMixingMatrix_Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 13) {
            message.matrix.push(reader.float());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.matrix.push(reader.float());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetClusterMixingMatrix_Response {
    return {
      matrix: globalThis.Array.isArray(object?.matrix) ? object.matrix.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: GetClusterMixingMatrix_Response): unknown {
    const obj: any = {};
    if (message.matrix?.length) {
      obj.matrix = message.matrix;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetClusterMixingMatrix_Response>, I>>(base?: I): GetClusterMixingMatrix_Response {
    return GetClusterMixingMatrix_Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetClusterMixingMatrix_Response>, I>>(
    object: I,
  ): GetClusterMixingMatrix_Response {
    const message = createBaseGetClusterMixingMatrix_Response();
    message.matrix = object.matrix?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetTargetClusterMixingMatrix(): GetTargetClusterMixingMatrix {
  return {};
}

export const GetTargetClusterMixingMatrix = {
  encode(_: GetTargetClusterMixingMatrix, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetTargetClusterMixingMatrix {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTargetClusterMixingMatrix();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetTargetClusterMixingMatrix {
    return {};
  },

  toJSON(_: GetTargetClusterMixingMatrix): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTargetClusterMixingMatrix>, I>>(base?: I): GetTargetClusterMixingMatrix {
    return GetTargetClusterMixingMatrix.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTargetClusterMixingMatrix>, I>>(_: I): GetTargetClusterMixingMatrix {
    const message = createBaseGetTargetClusterMixingMatrix();
    return message;
  },
};

function createBaseGetTargetClusterMixingMatrix_Request(): GetTargetClusterMixingMatrix_Request {
  return {};
}

export const GetTargetClusterMixingMatrix_Request = {
  encode(_: GetTargetClusterMixingMatrix_Request, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetTargetClusterMixingMatrix_Request {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTargetClusterMixingMatrix_Request();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetTargetClusterMixingMatrix_Request {
    return {};
  },

  toJSON(_: GetTargetClusterMixingMatrix_Request): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTargetClusterMixingMatrix_Request>, I>>(
    base?: I,
  ): GetTargetClusterMixingMatrix_Request {
    return GetTargetClusterMixingMatrix_Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTargetClusterMixingMatrix_Request>, I>>(
    _: I,
  ): GetTargetClusterMixingMatrix_Request {
    const message = createBaseGetTargetClusterMixingMatrix_Request();
    return message;
  },
};

function createBaseGetTargetClusterMixingMatrix_Response(): GetTargetClusterMixingMatrix_Response {
  return { matrix: [] };
}

export const GetTargetClusterMixingMatrix_Response = {
  encode(message: GetTargetClusterMixingMatrix_Response, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.matrix) {
      writer.float(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetTargetClusterMixingMatrix_Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTargetClusterMixingMatrix_Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 13) {
            message.matrix.push(reader.float());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.matrix.push(reader.float());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTargetClusterMixingMatrix_Response {
    return {
      matrix: globalThis.Array.isArray(object?.matrix) ? object.matrix.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: GetTargetClusterMixingMatrix_Response): unknown {
    const obj: any = {};
    if (message.matrix?.length) {
      obj.matrix = message.matrix;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTargetClusterMixingMatrix_Response>, I>>(
    base?: I,
  ): GetTargetClusterMixingMatrix_Response {
    return GetTargetClusterMixingMatrix_Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTargetClusterMixingMatrix_Response>, I>>(
    object: I,
  ): GetTargetClusterMixingMatrix_Response {
    const message = createBaseGetTargetClusterMixingMatrix_Response();
    message.matrix = object.matrix?.map((e) => e) || [];
    return message;
  },
};

function createBaseSetTargetClusterMixingMatrix(): SetTargetClusterMixingMatrix {
  return {};
}

export const SetTargetClusterMixingMatrix = {
  encode(_: SetTargetClusterMixingMatrix, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetTargetClusterMixingMatrix {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetTargetClusterMixingMatrix();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SetTargetClusterMixingMatrix {
    return {};
  },

  toJSON(_: SetTargetClusterMixingMatrix): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SetTargetClusterMixingMatrix>, I>>(base?: I): SetTargetClusterMixingMatrix {
    return SetTargetClusterMixingMatrix.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetTargetClusterMixingMatrix>, I>>(_: I): SetTargetClusterMixingMatrix {
    const message = createBaseSetTargetClusterMixingMatrix();
    return message;
  },
};

function createBaseSetTargetClusterMixingMatrix_Request(): SetTargetClusterMixingMatrix_Request {
  return { matrix: [] };
}

export const SetTargetClusterMixingMatrix_Request = {
  encode(message: SetTargetClusterMixingMatrix_Request, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.matrix) {
      writer.float(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetTargetClusterMixingMatrix_Request {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetTargetClusterMixingMatrix_Request();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 13) {
            message.matrix.push(reader.float());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.matrix.push(reader.float());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetTargetClusterMixingMatrix_Request {
    return {
      matrix: globalThis.Array.isArray(object?.matrix) ? object.matrix.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: SetTargetClusterMixingMatrix_Request): unknown {
    const obj: any = {};
    if (message.matrix?.length) {
      obj.matrix = message.matrix;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetTargetClusterMixingMatrix_Request>, I>>(
    base?: I,
  ): SetTargetClusterMixingMatrix_Request {
    return SetTargetClusterMixingMatrix_Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetTargetClusterMixingMatrix_Request>, I>>(
    object: I,
  ): SetTargetClusterMixingMatrix_Request {
    const message = createBaseSetTargetClusterMixingMatrix_Request();
    message.matrix = object.matrix?.map((e) => e) || [];
    return message;
  },
};

function createBaseSetTargetClusterMixingMatrix_Response(): SetTargetClusterMixingMatrix_Response {
  return {};
}

export const SetTargetClusterMixingMatrix_Response = {
  encode(_: SetTargetClusterMixingMatrix_Response, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetTargetClusterMixingMatrix_Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetTargetClusterMixingMatrix_Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SetTargetClusterMixingMatrix_Response {
    return {};
  },

  toJSON(_: SetTargetClusterMixingMatrix_Response): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SetTargetClusterMixingMatrix_Response>, I>>(
    base?: I,
  ): SetTargetClusterMixingMatrix_Response {
    return SetTargetClusterMixingMatrix_Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetTargetClusterMixingMatrix_Response>, I>>(
    _: I,
  ): SetTargetClusterMixingMatrix_Response {
    const message = createBaseSetTargetClusterMixingMatrix_Response();
    return message;
  },
};

function createBaseGetPhasePower(): GetPhasePower {
  return {};
}

export const GetPhasePower = {
  encode(_: GetPhasePower, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPhasePower {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPhasePower();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetPhasePower {
    return {};
  },

  toJSON(_: GetPhasePower): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPhasePower>, I>>(base?: I): GetPhasePower {
    return GetPhasePower.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPhasePower>, I>>(_: I): GetPhasePower {
    const message = createBaseGetPhasePower();
    return message;
  },
};

function createBaseGetPhasePower_Request(): GetPhasePower_Request {
  return {};
}

export const GetPhasePower_Request = {
  encode(_: GetPhasePower_Request, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPhasePower_Request {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPhasePower_Request();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetPhasePower_Request {
    return {};
  },

  toJSON(_: GetPhasePower_Request): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPhasePower_Request>, I>>(base?: I): GetPhasePower_Request {
    return GetPhasePower_Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPhasePower_Request>, I>>(_: I): GetPhasePower_Request {
    const message = createBaseGetPhasePower_Request();
    return message;
  },
};

function createBaseGetPhasePower_Response(): GetPhasePower_Response {
  return { power: [] };
}

export const GetPhasePower_Response = {
  encode(message: GetPhasePower_Response, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.power) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPhasePower_Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPhasePower_Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.power.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.power.push(reader.int32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPhasePower_Response {
    return { power: globalThis.Array.isArray(object?.power) ? object.power.map((e: any) => globalThis.Number(e)) : [] };
  },

  toJSON(message: GetPhasePower_Response): unknown {
    const obj: any = {};
    if (message.power?.length) {
      obj.power = message.power.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPhasePower_Response>, I>>(base?: I): GetPhasePower_Response {
    return GetPhasePower_Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPhasePower_Response>, I>>(object: I): GetPhasePower_Response {
    const message = createBaseGetPhasePower_Response();
    message.power = object.power?.map((e) => e) || [];
    return message;
  },
};

function createBaseSetPhasePower(): SetPhasePower {
  return {};
}

export const SetPhasePower = {
  encode(_: SetPhasePower, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetPhasePower {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetPhasePower();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SetPhasePower {
    return {};
  },

  toJSON(_: SetPhasePower): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SetPhasePower>, I>>(base?: I): SetPhasePower {
    return SetPhasePower.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetPhasePower>, I>>(_: I): SetPhasePower {
    const message = createBaseSetPhasePower();
    return message;
  },
};

function createBaseSetPhasePower_Request(): SetPhasePower_Request {
  return { power: [] };
}

export const SetPhasePower_Request = {
  encode(message: SetPhasePower_Request, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.power) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetPhasePower_Request {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetPhasePower_Request();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.power.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.power.push(reader.int32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetPhasePower_Request {
    return { power: globalThis.Array.isArray(object?.power) ? object.power.map((e: any) => globalThis.Number(e)) : [] };
  },

  toJSON(message: SetPhasePower_Request): unknown {
    const obj: any = {};
    if (message.power?.length) {
      obj.power = message.power.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetPhasePower_Request>, I>>(base?: I): SetPhasePower_Request {
    return SetPhasePower_Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetPhasePower_Request>, I>>(object: I): SetPhasePower_Request {
    const message = createBaseSetPhasePower_Request();
    message.power = object.power?.map((e) => e) || [];
    return message;
  },
};

function createBaseSetPhasePower_Response(): SetPhasePower_Response {
  return {};
}

export const SetPhasePower_Response = {
  encode(_: SetPhasePower_Response, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetPhasePower_Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetPhasePower_Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SetPhasePower_Response {
    return {};
  },

  toJSON(_: SetPhasePower_Response): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SetPhasePower_Response>, I>>(base?: I): SetPhasePower_Response {
    return SetPhasePower_Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetPhasePower_Response>, I>>(_: I): SetPhasePower_Response {
    const message = createBaseSetPhasePower_Response();
    return message;
  },
};

function createBaseGetTargetPhasePower(): GetTargetPhasePower {
  return {};
}

export const GetTargetPhasePower = {
  encode(_: GetTargetPhasePower, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetTargetPhasePower {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTargetPhasePower();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetTargetPhasePower {
    return {};
  },

  toJSON(_: GetTargetPhasePower): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTargetPhasePower>, I>>(base?: I): GetTargetPhasePower {
    return GetTargetPhasePower.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTargetPhasePower>, I>>(_: I): GetTargetPhasePower {
    const message = createBaseGetTargetPhasePower();
    return message;
  },
};

function createBaseGetTargetPhasePower_Request(): GetTargetPhasePower_Request {
  return {};
}

export const GetTargetPhasePower_Request = {
  encode(_: GetTargetPhasePower_Request, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetTargetPhasePower_Request {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTargetPhasePower_Request();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetTargetPhasePower_Request {
    return {};
  },

  toJSON(_: GetTargetPhasePower_Request): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTargetPhasePower_Request>, I>>(base?: I): GetTargetPhasePower_Request {
    return GetTargetPhasePower_Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTargetPhasePower_Request>, I>>(_: I): GetTargetPhasePower_Request {
    const message = createBaseGetTargetPhasePower_Request();
    return message;
  },
};

function createBaseGetTargetPhasePower_Response(): GetTargetPhasePower_Response {
  return { power: [] };
}

export const GetTargetPhasePower_Response = {
  encode(message: GetTargetPhasePower_Response, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.power) {
      writer.float(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetTargetPhasePower_Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTargetPhasePower_Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 13) {
            message.power.push(reader.float());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.power.push(reader.float());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTargetPhasePower_Response {
    return { power: globalThis.Array.isArray(object?.power) ? object.power.map((e: any) => globalThis.Number(e)) : [] };
  },

  toJSON(message: GetTargetPhasePower_Response): unknown {
    const obj: any = {};
    if (message.power?.length) {
      obj.power = message.power;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTargetPhasePower_Response>, I>>(base?: I): GetTargetPhasePower_Response {
    return GetTargetPhasePower_Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTargetPhasePower_Response>, I>>(object: I): GetTargetPhasePower_Response {
    const message = createBaseGetTargetPhasePower_Response();
    message.power = object.power?.map((e) => e) || [];
    return message;
  },
};

function createBaseSetTargetPhasePower(): SetTargetPhasePower {
  return {};
}

export const SetTargetPhasePower = {
  encode(_: SetTargetPhasePower, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetTargetPhasePower {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetTargetPhasePower();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SetTargetPhasePower {
    return {};
  },

  toJSON(_: SetTargetPhasePower): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SetTargetPhasePower>, I>>(base?: I): SetTargetPhasePower {
    return SetTargetPhasePower.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetTargetPhasePower>, I>>(_: I): SetTargetPhasePower {
    const message = createBaseSetTargetPhasePower();
    return message;
  },
};

function createBaseSetTargetPhasePower_Request(): SetTargetPhasePower_Request {
  return { power: [] };
}

export const SetTargetPhasePower_Request = {
  encode(message: SetTargetPhasePower_Request, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.power) {
      writer.float(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetTargetPhasePower_Request {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetTargetPhasePower_Request();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 13) {
            message.power.push(reader.float());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.power.push(reader.float());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetTargetPhasePower_Request {
    return { power: globalThis.Array.isArray(object?.power) ? object.power.map((e: any) => globalThis.Number(e)) : [] };
  },

  toJSON(message: SetTargetPhasePower_Request): unknown {
    const obj: any = {};
    if (message.power?.length) {
      obj.power = message.power;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetTargetPhasePower_Request>, I>>(base?: I): SetTargetPhasePower_Request {
    return SetTargetPhasePower_Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetTargetPhasePower_Request>, I>>(object: I): SetTargetPhasePower_Request {
    const message = createBaseSetTargetPhasePower_Request();
    message.power = object.power?.map((e) => e) || [];
    return message;
  },
};

function createBaseSetTargetPhasePower_Response(): SetTargetPhasePower_Response {
  return {};
}

export const SetTargetPhasePower_Response = {
  encode(_: SetTargetPhasePower_Response, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetTargetPhasePower_Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetTargetPhasePower_Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SetTargetPhasePower_Response {
    return {};
  },

  toJSON(_: SetTargetPhasePower_Response): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SetTargetPhasePower_Response>, I>>(base?: I): SetTargetPhasePower_Response {
    return SetTargetPhasePower_Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetTargetPhasePower_Response>, I>>(_: I): SetTargetPhasePower_Response {
    const message = createBaseSetTargetPhasePower_Response();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };
