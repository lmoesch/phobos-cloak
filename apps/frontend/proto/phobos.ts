// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               v4.24.2
// source: phobos.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  GetClusterMixingMatrix_Request,
  GetClusterMixingMatrix_Response,
  GetPhasePower_Request,
  GetPhasePower_Response,
  GetTargetClusterMixingMatrix_Request,
  GetTargetClusterMixingMatrix_Response,
  GetTargetPhasePower_Request,
  GetTargetPhasePower_Response,
  SetClusterMixingMatrix_Request,
  SetClusterMixingMatrix_Response,
  SetPhasePower_Request,
  SetPhasePower_Response,
  SetTargetClusterMixingMatrix_Request,
  SetTargetClusterMixingMatrix_Response,
  SetTargetPhasePower_Request,
  SetTargetPhasePower_Response,
} from "./phobos.cloak";

export const protobufPackage = "";

export interface Request {
  /** Cloak */
  getClusterMixingMatrix?: GetClusterMixingMatrix_Request | undefined;
  setClusterMixingMatrix?: SetClusterMixingMatrix_Request | undefined;
  setPhasePower?: SetPhasePower_Request | undefined;
  getPhasePower?: GetPhasePower_Request | undefined;
  getTargetClusterMixingMatrix?: GetTargetClusterMixingMatrix_Request | undefined;
  getTargetPhasePower?: GetTargetPhasePower_Request | undefined;
  setTargetClusterMixingMatrix?: SetTargetClusterMixingMatrix_Request | undefined;
  setTargetPhasePower?: SetTargetPhasePower_Request | undefined;
}

export interface Response {
  /** Cloak */
  getClusterMixingMatrix?: GetClusterMixingMatrix_Response | undefined;
  setClusterMixingMatrix?: SetClusterMixingMatrix_Response | undefined;
  setPhasePower?: SetPhasePower_Response | undefined;
  getPhasePower?: GetPhasePower_Response | undefined;
  getTargetClusterMixingMatrix?: GetTargetClusterMixingMatrix_Response | undefined;
  getTargetPhasePower?: GetTargetPhasePower_Response | undefined;
  setTargetClusterMixingMatrix?: SetTargetClusterMixingMatrix_Response | undefined;
  setTargetPhasePower?: SetTargetPhasePower_Response | undefined;
}

export interface Error {
  type: string;
  message: string;
}

export interface PhobosMessage {
  id: string;
  request?: Request | undefined;
  response?: Response | undefined;
  error?: Error | undefined;
}

function createBaseRequest(): Request {
  return {
    getClusterMixingMatrix: undefined,
    setClusterMixingMatrix: undefined,
    setPhasePower: undefined,
    getPhasePower: undefined,
    getTargetClusterMixingMatrix: undefined,
    getTargetPhasePower: undefined,
    setTargetClusterMixingMatrix: undefined,
    setTargetPhasePower: undefined,
  };
}

export const Request = {
  encode(message: Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.getClusterMixingMatrix !== undefined) {
      GetClusterMixingMatrix_Request.encode(message.getClusterMixingMatrix, writer.uint32(10).fork()).join();
    }
    if (message.setClusterMixingMatrix !== undefined) {
      SetClusterMixingMatrix_Request.encode(message.setClusterMixingMatrix, writer.uint32(18).fork()).join();
    }
    if (message.setPhasePower !== undefined) {
      SetPhasePower_Request.encode(message.setPhasePower, writer.uint32(26).fork()).join();
    }
    if (message.getPhasePower !== undefined) {
      GetPhasePower_Request.encode(message.getPhasePower, writer.uint32(34).fork()).join();
    }
    if (message.getTargetClusterMixingMatrix !== undefined) {
      GetTargetClusterMixingMatrix_Request.encode(message.getTargetClusterMixingMatrix, writer.uint32(42).fork())
        .join();
    }
    if (message.getTargetPhasePower !== undefined) {
      GetTargetPhasePower_Request.encode(message.getTargetPhasePower, writer.uint32(50).fork()).join();
    }
    if (message.setTargetClusterMixingMatrix !== undefined) {
      SetTargetClusterMixingMatrix_Request.encode(message.setTargetClusterMixingMatrix, writer.uint32(58).fork())
        .join();
    }
    if (message.setTargetPhasePower !== undefined) {
      SetTargetPhasePower_Request.encode(message.setTargetPhasePower, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Request {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.getClusterMixingMatrix = GetClusterMixingMatrix_Request.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.setClusterMixingMatrix = SetClusterMixingMatrix_Request.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.setPhasePower = SetPhasePower_Request.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.getPhasePower = GetPhasePower_Request.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.getTargetClusterMixingMatrix = GetTargetClusterMixingMatrix_Request.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.getTargetPhasePower = GetTargetPhasePower_Request.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.setTargetClusterMixingMatrix = SetTargetClusterMixingMatrix_Request.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.setTargetPhasePower = SetTargetPhasePower_Request.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request {
    return {
      getClusterMixingMatrix: isSet(object.getClusterMixingMatrix)
        ? GetClusterMixingMatrix_Request.fromJSON(object.getClusterMixingMatrix)
        : undefined,
      setClusterMixingMatrix: isSet(object.setClusterMixingMatrix)
        ? SetClusterMixingMatrix_Request.fromJSON(object.setClusterMixingMatrix)
        : undefined,
      setPhasePower: isSet(object.setPhasePower) ? SetPhasePower_Request.fromJSON(object.setPhasePower) : undefined,
      getPhasePower: isSet(object.getPhasePower) ? GetPhasePower_Request.fromJSON(object.getPhasePower) : undefined,
      getTargetClusterMixingMatrix: isSet(object.getTargetClusterMixingMatrix)
        ? GetTargetClusterMixingMatrix_Request.fromJSON(object.getTargetClusterMixingMatrix)
        : undefined,
      getTargetPhasePower: isSet(object.getTargetPhasePower)
        ? GetTargetPhasePower_Request.fromJSON(object.getTargetPhasePower)
        : undefined,
      setTargetClusterMixingMatrix: isSet(object.setTargetClusterMixingMatrix)
        ? SetTargetClusterMixingMatrix_Request.fromJSON(object.setTargetClusterMixingMatrix)
        : undefined,
      setTargetPhasePower: isSet(object.setTargetPhasePower)
        ? SetTargetPhasePower_Request.fromJSON(object.setTargetPhasePower)
        : undefined,
    };
  },

  toJSON(message: Request): unknown {
    const obj: any = {};
    if (message.getClusterMixingMatrix !== undefined) {
      obj.getClusterMixingMatrix = GetClusterMixingMatrix_Request.toJSON(message.getClusterMixingMatrix);
    }
    if (message.setClusterMixingMatrix !== undefined) {
      obj.setClusterMixingMatrix = SetClusterMixingMatrix_Request.toJSON(message.setClusterMixingMatrix);
    }
    if (message.setPhasePower !== undefined) {
      obj.setPhasePower = SetPhasePower_Request.toJSON(message.setPhasePower);
    }
    if (message.getPhasePower !== undefined) {
      obj.getPhasePower = GetPhasePower_Request.toJSON(message.getPhasePower);
    }
    if (message.getTargetClusterMixingMatrix !== undefined) {
      obj.getTargetClusterMixingMatrix = GetTargetClusterMixingMatrix_Request.toJSON(
        message.getTargetClusterMixingMatrix,
      );
    }
    if (message.getTargetPhasePower !== undefined) {
      obj.getTargetPhasePower = GetTargetPhasePower_Request.toJSON(message.getTargetPhasePower);
    }
    if (message.setTargetClusterMixingMatrix !== undefined) {
      obj.setTargetClusterMixingMatrix = SetTargetClusterMixingMatrix_Request.toJSON(
        message.setTargetClusterMixingMatrix,
      );
    }
    if (message.setTargetPhasePower !== undefined) {
      obj.setTargetPhasePower = SetTargetPhasePower_Request.toJSON(message.setTargetPhasePower);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request>, I>>(base?: I): Request {
    return Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request>, I>>(object: I): Request {
    const message = createBaseRequest();
    message.getClusterMixingMatrix =
      (object.getClusterMixingMatrix !== undefined && object.getClusterMixingMatrix !== null)
        ? GetClusterMixingMatrix_Request.fromPartial(object.getClusterMixingMatrix)
        : undefined;
    message.setClusterMixingMatrix =
      (object.setClusterMixingMatrix !== undefined && object.setClusterMixingMatrix !== null)
        ? SetClusterMixingMatrix_Request.fromPartial(object.setClusterMixingMatrix)
        : undefined;
    message.setPhasePower = (object.setPhasePower !== undefined && object.setPhasePower !== null)
      ? SetPhasePower_Request.fromPartial(object.setPhasePower)
      : undefined;
    message.getPhasePower = (object.getPhasePower !== undefined && object.getPhasePower !== null)
      ? GetPhasePower_Request.fromPartial(object.getPhasePower)
      : undefined;
    message.getTargetClusterMixingMatrix =
      (object.getTargetClusterMixingMatrix !== undefined && object.getTargetClusterMixingMatrix !== null)
        ? GetTargetClusterMixingMatrix_Request.fromPartial(object.getTargetClusterMixingMatrix)
        : undefined;
    message.getTargetPhasePower = (object.getTargetPhasePower !== undefined && object.getTargetPhasePower !== null)
      ? GetTargetPhasePower_Request.fromPartial(object.getTargetPhasePower)
      : undefined;
    message.setTargetClusterMixingMatrix =
      (object.setTargetClusterMixingMatrix !== undefined && object.setTargetClusterMixingMatrix !== null)
        ? SetTargetClusterMixingMatrix_Request.fromPartial(object.setTargetClusterMixingMatrix)
        : undefined;
    message.setTargetPhasePower = (object.setTargetPhasePower !== undefined && object.setTargetPhasePower !== null)
      ? SetTargetPhasePower_Request.fromPartial(object.setTargetPhasePower)
      : undefined;
    return message;
  },
};

function createBaseResponse(): Response {
  return {
    getClusterMixingMatrix: undefined,
    setClusterMixingMatrix: undefined,
    setPhasePower: undefined,
    getPhasePower: undefined,
    getTargetClusterMixingMatrix: undefined,
    getTargetPhasePower: undefined,
    setTargetClusterMixingMatrix: undefined,
    setTargetPhasePower: undefined,
  };
}

export const Response = {
  encode(message: Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.getClusterMixingMatrix !== undefined) {
      GetClusterMixingMatrix_Response.encode(message.getClusterMixingMatrix, writer.uint32(10).fork()).join();
    }
    if (message.setClusterMixingMatrix !== undefined) {
      SetClusterMixingMatrix_Response.encode(message.setClusterMixingMatrix, writer.uint32(18).fork()).join();
    }
    if (message.setPhasePower !== undefined) {
      SetPhasePower_Response.encode(message.setPhasePower, writer.uint32(26).fork()).join();
    }
    if (message.getPhasePower !== undefined) {
      GetPhasePower_Response.encode(message.getPhasePower, writer.uint32(34).fork()).join();
    }
    if (message.getTargetClusterMixingMatrix !== undefined) {
      GetTargetClusterMixingMatrix_Response.encode(message.getTargetClusterMixingMatrix, writer.uint32(42).fork())
        .join();
    }
    if (message.getTargetPhasePower !== undefined) {
      GetTargetPhasePower_Response.encode(message.getTargetPhasePower, writer.uint32(50).fork()).join();
    }
    if (message.setTargetClusterMixingMatrix !== undefined) {
      SetTargetClusterMixingMatrix_Response.encode(message.setTargetClusterMixingMatrix, writer.uint32(58).fork())
        .join();
    }
    if (message.setTargetPhasePower !== undefined) {
      SetTargetPhasePower_Response.encode(message.setTargetPhasePower, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.getClusterMixingMatrix = GetClusterMixingMatrix_Response.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.setClusterMixingMatrix = SetClusterMixingMatrix_Response.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.setPhasePower = SetPhasePower_Response.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.getPhasePower = GetPhasePower_Response.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.getTargetClusterMixingMatrix = GetTargetClusterMixingMatrix_Response.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.getTargetPhasePower = GetTargetPhasePower_Response.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.setTargetClusterMixingMatrix = SetTargetClusterMixingMatrix_Response.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.setTargetPhasePower = SetTargetPhasePower_Response.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return {
      getClusterMixingMatrix: isSet(object.getClusterMixingMatrix)
        ? GetClusterMixingMatrix_Response.fromJSON(object.getClusterMixingMatrix)
        : undefined,
      setClusterMixingMatrix: isSet(object.setClusterMixingMatrix)
        ? SetClusterMixingMatrix_Response.fromJSON(object.setClusterMixingMatrix)
        : undefined,
      setPhasePower: isSet(object.setPhasePower) ? SetPhasePower_Response.fromJSON(object.setPhasePower) : undefined,
      getPhasePower: isSet(object.getPhasePower) ? GetPhasePower_Response.fromJSON(object.getPhasePower) : undefined,
      getTargetClusterMixingMatrix: isSet(object.getTargetClusterMixingMatrix)
        ? GetTargetClusterMixingMatrix_Response.fromJSON(object.getTargetClusterMixingMatrix)
        : undefined,
      getTargetPhasePower: isSet(object.getTargetPhasePower)
        ? GetTargetPhasePower_Response.fromJSON(object.getTargetPhasePower)
        : undefined,
      setTargetClusterMixingMatrix: isSet(object.setTargetClusterMixingMatrix)
        ? SetTargetClusterMixingMatrix_Response.fromJSON(object.setTargetClusterMixingMatrix)
        : undefined,
      setTargetPhasePower: isSet(object.setTargetPhasePower)
        ? SetTargetPhasePower_Response.fromJSON(object.setTargetPhasePower)
        : undefined,
    };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.getClusterMixingMatrix !== undefined) {
      obj.getClusterMixingMatrix = GetClusterMixingMatrix_Response.toJSON(message.getClusterMixingMatrix);
    }
    if (message.setClusterMixingMatrix !== undefined) {
      obj.setClusterMixingMatrix = SetClusterMixingMatrix_Response.toJSON(message.setClusterMixingMatrix);
    }
    if (message.setPhasePower !== undefined) {
      obj.setPhasePower = SetPhasePower_Response.toJSON(message.setPhasePower);
    }
    if (message.getPhasePower !== undefined) {
      obj.getPhasePower = GetPhasePower_Response.toJSON(message.getPhasePower);
    }
    if (message.getTargetClusterMixingMatrix !== undefined) {
      obj.getTargetClusterMixingMatrix = GetTargetClusterMixingMatrix_Response.toJSON(
        message.getTargetClusterMixingMatrix,
      );
    }
    if (message.getTargetPhasePower !== undefined) {
      obj.getTargetPhasePower = GetTargetPhasePower_Response.toJSON(message.getTargetPhasePower);
    }
    if (message.setTargetClusterMixingMatrix !== undefined) {
      obj.setTargetClusterMixingMatrix = SetTargetClusterMixingMatrix_Response.toJSON(
        message.setTargetClusterMixingMatrix,
      );
    }
    if (message.setTargetPhasePower !== undefined) {
      obj.setTargetPhasePower = SetTargetPhasePower_Response.toJSON(message.setTargetPhasePower);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response>, I>>(base?: I): Response {
    return Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response>, I>>(object: I): Response {
    const message = createBaseResponse();
    message.getClusterMixingMatrix =
      (object.getClusterMixingMatrix !== undefined && object.getClusterMixingMatrix !== null)
        ? GetClusterMixingMatrix_Response.fromPartial(object.getClusterMixingMatrix)
        : undefined;
    message.setClusterMixingMatrix =
      (object.setClusterMixingMatrix !== undefined && object.setClusterMixingMatrix !== null)
        ? SetClusterMixingMatrix_Response.fromPartial(object.setClusterMixingMatrix)
        : undefined;
    message.setPhasePower = (object.setPhasePower !== undefined && object.setPhasePower !== null)
      ? SetPhasePower_Response.fromPartial(object.setPhasePower)
      : undefined;
    message.getPhasePower = (object.getPhasePower !== undefined && object.getPhasePower !== null)
      ? GetPhasePower_Response.fromPartial(object.getPhasePower)
      : undefined;
    message.getTargetClusterMixingMatrix =
      (object.getTargetClusterMixingMatrix !== undefined && object.getTargetClusterMixingMatrix !== null)
        ? GetTargetClusterMixingMatrix_Response.fromPartial(object.getTargetClusterMixingMatrix)
        : undefined;
    message.getTargetPhasePower = (object.getTargetPhasePower !== undefined && object.getTargetPhasePower !== null)
      ? GetTargetPhasePower_Response.fromPartial(object.getTargetPhasePower)
      : undefined;
    message.setTargetClusterMixingMatrix =
      (object.setTargetClusterMixingMatrix !== undefined && object.setTargetClusterMixingMatrix !== null)
        ? SetTargetClusterMixingMatrix_Response.fromPartial(object.setTargetClusterMixingMatrix)
        : undefined;
    message.setTargetPhasePower = (object.setTargetPhasePower !== undefined && object.setTargetPhasePower !== null)
      ? SetTargetPhasePower_Response.fromPartial(object.setTargetPhasePower)
      : undefined;
    return message;
  },
};

function createBaseError(): Error {
  return { type: "", message: "" };
}

export const Error = {
  encode(message: Error, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Error {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Error {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: Error): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Error>, I>>(base?: I): Error {
    return Error.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Error>, I>>(object: I): Error {
    const message = createBaseError();
    message.type = object.type ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function createBasePhobosMessage(): PhobosMessage {
  return { id: "", request: undefined, response: undefined, error: undefined };
}

export const PhobosMessage = {
  encode(message: PhobosMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.request !== undefined) {
      Request.encode(message.request, writer.uint32(18).fork()).join();
    }
    if (message.response !== undefined) {
      Response.encode(message.response, writer.uint32(26).fork()).join();
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PhobosMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePhobosMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.request = Request.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.response = Response.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PhobosMessage {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      request: isSet(object.request) ? Request.fromJSON(object.request) : undefined,
      response: isSet(object.response) ? Response.fromJSON(object.response) : undefined,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: PhobosMessage): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.request !== undefined) {
      obj.request = Request.toJSON(message.request);
    }
    if (message.response !== undefined) {
      obj.response = Response.toJSON(message.response);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PhobosMessage>, I>>(base?: I): PhobosMessage {
    return PhobosMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PhobosMessage>, I>>(object: I): PhobosMessage {
    const message = createBasePhobosMessage();
    message.id = object.id ?? "";
    message.request = (object.request !== undefined && object.request !== null)
      ? Request.fromPartial(object.request)
      : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? Response.fromPartial(object.response)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
